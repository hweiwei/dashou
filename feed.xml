<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>大手游戏</title>
    <link href="https://hweiwei.github.io/dashou/feed.xml" rel="self" />
    <link href="https://hweiwei.github.io/dashou" />
    <updated>2022-09-23T10:45:49+08:00</updated>
    <author>
        <name>黄伟伟</name>
    </author>
    <id>https://hweiwei.github.io/dashou</id>

    <entry>
        <title>解决2.4.x ios 真机闪退问题</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/jie-jue-24x-ios-zhen-ji-shan-tui-wen-ti.html"/>
        <id>https://hweiwei.github.io/dashou/jie-jue-24x-ios-zhen-ji-shan-tui-wen-ti.html</id>

        <updated>2022-09-23T10:45:49+08:00</updated>
            <summary>
                <![CDATA[
                    由于 jit 不支持ios ，引擎错误开启支持导致。修改 \cocos2d-x\cocos\scripting\js-bindings\jswrapper\v8\ScriptEngine.cpp 该路径下方法jitSupported bool jitSupported() { #if CC_IOS_FORCE_DISABLE_JIT return false; #elif TARGET_CPU_X86 || TARGET_CPU_X86_64 return true; #else //2022.7.1 暂时移除其他版本jit支持，解决真机闪退问题 // // Check for arm64e. // cpu_type_t cpuType = 0; // size_t cpuTypeSize = sizeof(cpu_type_t); // if (::sysctlbyname(&quot;hw.cputype&quot;, &amp;cpuType, &amp;cpuTypeSize, nullptr, 0) &lt;&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>由于 jit 不支持ios ，引擎错误开启支持导致。修改 \cocos2d-x\cocos\scripting\js-bindings\jswrapper\v8\ScriptEngine.cpp 该路径下方法jitSupported</p>
<pre><code>


bool jitSupported() {
            #if CC_IOS_FORCE_DISABLE_JIT
            return false;
            #elif TARGET_CPU_X86 || TARGET_CPU_X86_64
            return true;
            #else
            
            //2022.7.1 暂时移除其他版本jit支持，解决真机闪退问题
//            // Check for arm64e.
//            cpu_type_t cpuType = 0;
//            size_t cpuTypeSize = sizeof(cpu_type_t);
//            if (::sysctlbyname(&quot;hw.cputype&quot;, &amp;cpuType, &amp;cpuTypeSize, nullptr, 0) &lt; 0) {
//                SE_LOGD(&quot;Could not execute sysctl() to get CPU type: %s&quot;, strerror(errno));
//            }
//
//            cpu_subtype_t cpuSubType = 0;
//            if (::sysctlbyname(&quot;hw.cpusubtype&quot;, &amp;cpuSubType, &amp;cpuTypeSize, nullptr, 0) &lt; 0) {
//                SE_LOGD(&quot;Could not execute sysctl() to get CPU subtype: %s&quot;, strerror(errno));
//            }
//
//            // Tracing is necessary unless the device is arm64e (A12 chip or higher).
//            if (cpuType != CPU_TYPE_ARM64 || cpuSubType != CPU_SUBTYPE_ARM64E) {
//                return false;
//            }
//
//            // Check for iOS 14.2 and higher.
//            size_t osVersionSize;
//            ::sysctlbyname(&quot;kern.osversion&quot;, NULL, &amp;osVersionSize, NULL, 0);
//            char osversionBuffer[osVersionSize];
//
//            if (::sysctlbyname(&quot;kern.osversion&quot;, osversionBuffer, &amp;osVersionSize, NULL, 0) &lt; 0) {
//                SE_LOGD(&quot;Could not execute sysctl() to get current OS version: %s&quot;, strerror(errno));
//                return false;
//            }
//
//            int majorVersion = 0;
//            char minorLetter = &#39;Z&#39;;
//
//            for (size_t index = 0; index &lt; osVersionSize; index++) {
//                char version_char = osversionBuffer[index];
//                // Find the minor version build letter.
//                if (isalpha(version_char)) {
//                    majorVersion = atoi((const char*)osversionBuffer);
//                    minorLetter = toupper(version_char);
//                    break;
//                }
//            }
//            // 18B92 is iOS 14.2 beta release candidate where tracing became unnecessary.
//            return majorVersion &gt; 18 || (majorVersion == 18 &amp;&amp; minorLetter &gt;= &#39;B&#39;);
            return false;
            #endif //TARGET_CPU_X86 || TARGET_CPU_X86_64
        }
                
        ```
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>cocos热更动态版本地址研究</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/cocosre-geng-dong-tai-ban-ben-di-zhi-yan-jiu.html"/>
        <id>https://hweiwei.github.io/dashou/cocosre-geng-dong-tai-ban-ben-di-zhi-yan-jiu.html</id>

        <updated>2022-08-25T19:49:54+08:00</updated>
            <summary>
                <![CDATA[
                    cocos creator 2.x 版本中，关于热更的远程地址，版本等信息来源于工程中写入的project.manifest ，没有提供外部修改接口。如果想更自由的管理版本、热更地址配置，势必要修改源码。但是修改源码对于cocos 引擎版本升级不够友好。经过研究jsb 相关内容，这边提供一个在不修改源码的情况下达到自由控制版本信息的方法。 let asset = JSON.parse(data._nativeAsset);
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>cocos creator 2.x 版本中，关于热更的远程地址，版本等信息来源于工程中写入的project.manifest ，没有提供外部修改接口。如果想更自由的管理版本、热更地址配置，势必要修改源码。但是修改源码对于cocos 引擎版本升级不够友好。经过研究jsb 相关内容，这边提供一个在不修改源码的情况下达到自由控制版本信息的方法。</p>
<p> </p>
<ol>
<li>获取本地热更文件project.manifest 获得内容data 并解析 </li>
</ol>
<p><code><span class="code-snippet__keyword">let</span> asset =</code> <span class="code-snippet__built_in">JSON</span>.parse(data._nativeAsset);</p>
<ol>
<li> </li>
</ol>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>ios 覆盖安装问题研究</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/guan-yu-cocos-creator-duo-bundle-re-geng-yan-jiu.html"/>
        <id>https://hweiwei.github.io/dashou/guan-yu-cocos-creator-duo-bundle-re-geng-yan-jiu.html</id>

        <updated>2022-08-25T17:45:44+08:00</updated>
            <summary>
                <![CDATA[
                    在实现cocos热更方案过程中，一切都很顺利。所有工作完成之后，发现ios 在覆盖安装之后，如果没有清理缓存，即使安装的版本是旧的也不会进行热更。这种情况，比较好理解，版本文件还在，所以比对版本文件没有问题就不会进行热更。真正出问题的是游戏启动后，竟然使用的脚本是覆盖安装后的，而不是热更缓存的。这个问题挺头疼。
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>在实现cocos热更方案过程中，一切都很顺利。所有工作完成之后，发现ios 在覆盖安装之后，如果没有清理缓存，即使安装的版本是旧的也不会进行热更。这种情况，比较好理解，版本文件还在，所以比对版本文件没有问题就不会进行热更。真正出问题的是游戏启动后，竟然使用的脚本是覆盖安装后的，而不是热更缓存的。这个问题挺头疼。</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>异形屏适配组件</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/safearea-component.html"/>
        <id>https://hweiwei.github.io/dashou/safearea-component.html</id>

        <updated>2022-08-18T09:16:38+08:00</updated>
            <summary>
                <![CDATA[
                    cocos creator 提供了safeArea 组件来适配刘海屏的情况，但是该组件只能在根节点生效，并且全屏适配，并不是很友好。我们仿造他实现一个轻量的子节点左右适配。实现如下： const { ccclass, property, menu, executeInEditMode, requireComponent, executionOrder } = cc._decorator; @ccclass @executeInEditMode @requireComponent(cc.Widget) @executionOrder(1000) @menu(&quot;tools/SafeArea&quot;) export default class SafeArea extends cc.Component { @property({ tooltip: &quot;异形屏适配&quot;, displayName: &quot;适配左边&quot;, }) left: boolean = true; @property({ tooltip: &quot;异形屏适配&quot;, displayName: &quot;适配右边&quot;, }) right: boolean&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="cocos-creator-提供了safearea-组件来适配刘海屏的情况，但是该组件只能在根节点生效，并且全屏适配，并不是很友好。我们仿造他实现一个轻量的子节点左右适配。实现如下：">cocos creator 提供了safeArea 组件来适配刘海屏的情况，但是该组件只能在根节点生效，并且全屏适配，并不是很友好。我们仿造他实现一个轻量的子节点左右适配。实现如下：</h3>
<pre><code>
const { ccclass, property, menu, executeInEditMode, requireComponent, executionOrder } = cc._decorator;
@ccclass
@executeInEditMode
@requireComponent(cc.Widget)
@executionOrder(1000)
@menu(&quot;tools/SafeArea&quot;)
export default class SafeArea extends cc.Component {
    @property({
        tooltip: &quot;异形屏适配&quot;,
        displayName: &quot;适配左边&quot;,
    })
    left: boolean = true;

    @property({
        tooltip: &quot;异形屏适配&quot;,
        displayName: &quot;适配右边&quot;,
    })
    right: boolean = false;

    onLoad() {
        let widget = this.node.getComponent(cc.Widget);
        if (!widget) {
            return;
        }
        widget.updateAlignment();

        let safeArea = cc.sys.getSafeAreaRect();
        let viewsize = cc.winSize;
        let widthOffset = viewsize.width - safeArea.width;

        if (this.left &amp;&amp; widget.isAlignLeft) {
            widget.left += safeArea.x;
        }

        if (this.right &amp;&amp; widget.isAlignRight) {
            widget.right += widthOffset - safeArea.x;
        }

        widget.updateAlignment();
    }

    protected onEnable(): void {}
}
</code></pre>

            ]]>
        </content>
    </entry>
</feed>
