<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>大手游戏</title>
    <link href="https://hweiwei.github.io/dashou/feed.xml" rel="self" />
    <link href="https://hweiwei.github.io/dashou" />
    <updated>2024-05-13T19:01:40+08:00</updated>
    <author>
        <name>黄伟伟</name>
    </author>
    <id>https://hweiwei.github.io/dashou</id>

    <entry>
        <title>贝塞尔曲线研究</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/bei-sai-er-qu-xian-yan-jiu-2.html"/>
        <id>https://hweiwei.github.io/dashou/bei-sai-er-qu-xian-yan-jiu-2.html</id>

        <updated>2024-05-13T19:01:40+08:00</updated>
            <summary>
                <![CDATA[
                    核心公式： /** * * @param&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>核心公式：</p><pre><code> /**
     *
     * @param C1 起始点
     * @param C2 控制点1
     * @param C3 控制点2
     * @param C4 目标点
     * @param t  时间拟合
     * @returns
     */
    bezier(C1, C2, C3, C4, t) {
        var t1 = 1 - t;
        return t1 * (t1 * (C1 + (C2 * 3 - C1) * t) + C3 * 3 * t * t) + C4 * t * t * t;
    }
</code></pre>
<p>按照该公式，可以在三维中分别实现x,y,z轴的贝塞尔曲线变化，达到三维贝塞尔曲线效果，二维只用实现x,y坐标即可</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>关于char模式文本缓存查看研究</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/guan-yu-charmo-shi-wen-ben-huan-cun-cha-kan-yan-jiu.html"/>
        <id>https://hweiwei.github.io/dashou/guan-yu-charmo-shi-wen-ben-huan-cun-cha-kan-yan-jiu.html</id>

        <updated>2023-10-11T17:26:25+08:00</updated>
            <summary>
                <![CDATA[
                    怎么查看char模式文本缓存内容？我们可以借鉴官方关于动态合图的方式在场景的最上层加上一层来显示char缓存的文本内容，废话不多说，直接上代码 小伙伴们如果不知道什么是自执行函数，随便新建一个文件后缀名改成ts,将上面代码拷入文件中既能生效
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p class="msg msg--info">怎么查看char模式文本缓存内容？我们可以借鉴官方关于动态合图的方式在场景的最上层加上一层来显示char缓存的文本内容，废话不多说，直接上代码</p>
<p><code></code></p>
<div>
<div>(() =&gt; {</div>
<div>    //@ts-ignore</div>
<div>    cc.Label.prototype.showDebug = function (show) {</div>
<div>        if (show) {</div>
<div>            if (!this._debugNode || !this._debugNode.isValid) {</div>
<div>                let width = cc.visibleRect.width;</div>
<div>                let height = cc.visibleRect.height;</div>
<br>
<div>                this._debugNode = new cc.Node("SHAREATLAS_DEBUG_NODE");</div>
<div>                this._debugNode.width = width;</div>
<div>                this._debugNode.height = height;</div>
<div>                this._debugNode.x = width / 2;</div>
<div>                this._debugNode.y = height / 2;</div>
<div>                this._debugNode.zIndex = cc.macro.MAX_ZINDEX;</div>
<div>                this._debugNode.parent = cc.director.getScene();</div>
<br>
<div>                //@ts-ignore</div>
<div>                this._debugNode.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;</div>
<div>                //@ts-ignore</div>
<div>                cc.Camera._setupDebugCamera();</div>
<br>
<div>                let scroll = this._debugNode.addComponent(cc.ScrollView);</div>
<br>
<div>                let content = new cc.Node("CONTENT");</div>
<div>                let layout = content.addComponent(cc.Layout);</div>
<div>                layout.type = cc.Layout.Type.VERTICAL;</div>
<div>                layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;</div>
<div>                content.parent = this._debugNode;</div>
<div>                content.width = 2048;</div>
<div>                content.anchorY = 1;</div>
<div>                content.x = 2048;</div>
<br>
<div>                scroll.content = content;</div>
<br>
<div>                let node = new cc.Node("ATLAS");</div>
<div>                //@ts-ignore</div>
<div>                let texture = cc.Label._shareAtlas.getTexture();</div>
<div>                let spriteFrame = new cc.SpriteFrame();</div>
<div>                spriteFrame.setTexture(texture);</div>
<br>
<div>                let sprite = node.addComponent(cc.Sprite);</div>
<div>                sprite.spriteFrame = spriteFrame;</div>
<br>
<div>                node.parent = content;</div>
<div>            }</div>
<div>            return this._debugNode;</div>
<div>        } else {</div>
<div>            if (this._debugNode) {</div>
<div>                this._debugNode.parent = null;</div>
<div>                this._debugNode = null;</div>
<div>            }</div>
<div>        }</div>
<div>    };</div>
<div>})();</div>
<div> </div>
<div>直接写一个自执行函数为 cc.Label.prototype 添加一个 showDebug 方法。之后就可以在控制台上执行方法来查看char文本缓存</div>
<div>我们来看下效果：</div>
<div><figure class="post__image"><img loading="lazy"  src="https://hweiwei.github.io/dashou/media/posts/13/tup.jpg" alt="" width="923" height="1045" sizes="100vw" srcset="https://hweiwei.github.io/dashou/media/posts/13/responsive/tup-xs.jpg 300w ,https://hweiwei.github.io/dashou/media/posts/13/responsive/tup-sm.jpg 480w ,https://hweiwei.github.io/dashou/media/posts/13/responsive/tup-md.jpg 768w ,https://hweiwei.github.io/dashou/media/posts/13/responsive/tup-lg.jpg 1024w ,https://hweiwei.github.io/dashou/media/posts/13/responsive/tup-xl.jpg 1360w ,https://hweiwei.github.io/dashou/media/posts/13/responsive/tup-2xl.jpg 1600w"></figure></div>
<div> </div>
<div>在控制台执行cc.Label.prototype.showDebug(true) 方法则可以在场景最上层看到当前的文本缓存。小伙伴们执行的时候可能会出现看不见的情况，别慌，因为默认设置了图层大小为2048*2048 ，拖动一下就能看到了。</div>
<div>在控制台执行cc.Label.prototype.showDebug(false) 将关闭显示</div>
<div> </div>
<p class="msg msg--info">小伙伴们如果不知道什么是自执行函数，随便新建一个文件后缀名改成ts,将上面代码拷入文件中既能生效</p>
<div> </div>
<div> </div>
<div> </div>
</div>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>ts命名空间合并</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/tsming-ming-kong-jian-he-bing.html"/>
        <id>https://hweiwei.github.io/dashou/tsming-ming-kong-jian-he-bing.html</id>

        <updated>2023-10-10T11:20:48+08:00</updated>
            <summary>
                <![CDATA[
                    在用ts 开发游戏的时候,发现命名空间使用比较不友好，需要文件引入以及使用声明文件.d.ts才能做到很好的代码提示，但是在复杂类设计的情况下.d.ts书写起来也比较费劲，于是开始研究怎么才能做到用命名空间隔离作用域并且能够有很好的使用体验。当前主要实现方式是挂载在windows底下，并且将同命名空间下的对象合并，来达到效果，效果比较理想。上代码： //UIMgr.ts文件实现 /* *&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>在用ts 开发游戏的时候,发现命名空间使用比较不友好，需要文件引入以及使用声明文件.d.ts才能做到很好的代码提示，但是在复杂类设计的情况下.d.ts书写起来也比较费劲，于是开始研究怎么才能做到用命名空间隔离作用域并且能够有很好的使用体验。当前主要实现方式是挂载在windows底下，并且将同命名空间下的对象合并，来达到效果，效果比较理想。上代码：</p><pre><code>//UIMgr.ts文件实现 
/*
 * @author: huangww
 * @Date: 2021-03-08 17:16:30
 * @LastEditTime: 2021-03-08 17:42:48
 * @FilePath: \ept\assets\Script\core\UIMgr.ts
 */
 namespace core {
    class UIMgr {
        /**测试UI */
        test() {
            console.log(&quot;UI TEST&quot;);
        }
    }
    export const ui = new UIMgr();
}
if (!window[&quot;core&quot;]) {
    window[&quot;core&quot;] = core;
} else {
    Object.assign(window[&quot;core&quot;], core);
}
</code></pre>
<pre><code>
//EventMgr.ts文件实现 
/*
 * @author: huangww
 * @Date: 2021-03-08 17:16:39
 * @LastEditTime: 2021-03-08 17:44:21
 * @FilePath: \ept\assets\Script\core\EventMgr.ts
 */
namespace core {
    /**全局变量跨文件使用测试 */
    export const test = {
        test: function () {
            core.ui.test();
        },
    };

    /**事件测试类 */
    class EventMgr {
        //test
        test() {
            console.log(&quot;EVENT TEST&quot;);
        }
    }
    /**
     *事件测试类实例
     */
    export const event = new EventMgr();
}
if (!window[&quot;core&quot;]) {
    window[&quot;core&quot;] = core;
} else {
    Object.assign(window[&quot;core&quot;], core);
}
</code></pre>
<p>在代码中即可直接使用core全局对象来访问</p><pre><code>core.event.test();core.test.test();
core.ui.test();
core .event.test():
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>cocos-webview 添加关闭按钮-android篇</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/cocos-webview-tian-jia-guan-bi-an-niu-androidpian.html"/>
        <id>https://hweiwei.github.io/dashou/cocos-webview-tian-jia-guan-bi-an-niu-androidpian.html</id>

        <updated>2023-08-03T09:47:03+08:00</updated>
            <summary>
                <![CDATA[
                    **前言：cocos webview 作为一个独立的容器在ui层级之上，所以我们想通过游戏内ui来操控它是不容易的事情，把操作ui直接加到webview 容器层上，可以解决这个问题 **&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>**前言：cocos webview 作为一个独立的容器在ui层级之上，所以我们想通过游戏内ui来操控它是不容易的事情，把操作ui直接加到webview 容器层上，可以解决这个问题 **</p><p>观察cocos2dxWebViewHelper 发现，cocos 通过这个类来管理游戏内的webview，所以我们只需要控制好在创建，销毁 webview 的时候，将相关ui做同样的动作即可</p><p>这边先实现下关闭按钮的创建。
在 cocos2dxWebViewHelper中添加方法</p><pre><code>    public static void createSkipButton(int index) {

        skipImgBtn = new ImageView(sCocos2dxActivity);
//        skipImgBtn.setRotation(90);
        //定义矩阵对象
        Matrix matrix = new Matrix();
        matrix.setRotate(90);
        //缩放原图
        // matrix.postScale(1.5f, 1.5f);
        float w = 0;
        float h = 0;

        Bitmap bitmap;
        Bitmap dstbmp;
        bitmap = BitmapFactory.decodeResource(sCocos2dxActivity.getResources(), R.drawable.skip);
        dstbmp = Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(), bitmap.getHeight(),matrix,true);
        skipImgBtn.setImageBitmap(dstbmp);
        w = dstbmp.getWidth();
        h = dstbmp.getHeight();
        //获取屏幕尺寸几种方式
        // 参考文档 http://blog.csdn.net/ithomer/article/details/6688883
        DisplayMetrics dm = new DisplayMetrics();
        sCocos2dxActivity.getWindowManager().getDefaultDisplay().getMetrics(dm);

        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams((int)w, (int)h);

        params.leftMargin = (int) (sCocos2dxActivity.getWindowManager().getDefaultDisplay().getWidth()-w-20);
        params.topMargin = (int) (sCocos2dxActivity.getWindowManager().getDefaultDisplay().getHeight()-h);

        Cocos2dxWebView view = webViews.get(index);
        view.skipImgBtn = skipImgBtn;

        btnIndex = index;

        skipImgBtn.bringToFront();
        sLayout.addView(skipImgBtn,params);

        skipImgBtn.invalidate();
        skipImgBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                removeWebView(btnIndex);
            }
        });

    }
        
</code></pre>
<p>来创建关闭按钮
添加移除方法</p><pre><code>public static void removeSkipBtn(){
        if (skipImgBtn!= null){
            sLayout.removeView(skipImgBtn);
            skipImgBtn = null;
        }
    }
</code></pre>
<p>skipImgBtn   记得在类中声明</p><pre><code>private static ImageView skipImgBtn = null;
    private static int btnIndex = 0;
</code></pre>
<p>方法实现完之后，只需在createWebView 方法中 跟着创建即可</p><pre><code> public static int createWebView() {
        final int index = viewTag;
        sCocos2dxActivity.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Cocos2dxWebView webView = new Cocos2dxWebView(sCocos2dxActivity, index);
                FrameLayout.LayoutParams lParams = new FrameLayout.LayoutParams(
                        FrameLayout.LayoutParams.WRAP_CONTENT,
                        FrameLayout.LayoutParams.WRAP_CONTENT);
                sLayout.addView(webView, lParams);

                webViews.put(index, webView);
                createSkipButton(index);
            }
        });
        return viewTag++;
    }
</code></pre>
<p>在移除中跟着移除</p><pre><code>public static void removeWebView(final int index) {
        sCocos2dxActivity.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Cocos2dxWebView webView = webViews.get(index);
                if (webView != null) {
                    webViews.remove(index);
                    sLayout.removeView(webView);
                    webView.destroy();
                    webView = null;
                }

                removeSkipBtn();
            }
        });
    }
</code></pre>
<p>别忘了在显隐控制中，跟着操作</p><pre><code> public static void setVisible(final int index, final boolean visible) {
        sCocos2dxActivity.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                Cocos2dxWebView webView = webViews.get(index);
                if (webView != null) {
                    webView.setVisibility(visible ? View.VISIBLE : View.GONE);
                }
                if (skipImgBtn!= null){
                    skipImgBtn.setVisibility(visible ? View.VISIBLE : View.GONE);
                }
            }
        });
    }
</code></pre>
<p>这样子就实现了在cocos webview 上添加关闭按钮的功能。</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>动态规划-限定条件求最优解</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/dong-tai-gui-hua-xian-ding-tiao-jian-qiu-zui-you-jie-2.html"/>
        <id>https://hweiwei.github.io/dashou/dong-tai-gui-hua-xian-ding-tiao-jian-qiu-zui-you-jie-2.html</id>

        <updated>2023-08-01T14:46:50+08:00</updated>
            <summary>
                <![CDATA[
                    原文发布于微信公众号https://mp.weixin.qq.com/s?__biz=MzI4MDA3MTcyMA==&amp;mid=2247483680&amp;idx=1&amp;sn=49c0d6934538cac1fe79d0430459b8d1&amp;chksm=ebbf5a67dcc8d371ca1f64da1dc7b23637cbbf1fd58e521e2cd6f4d37b4dcc79277343c81375&amp;token=1598275063&amp;lang=zh_CN#rd 游戏中经常会用到一些buff道具，最常见的比如建造建筑时使用的时间缩短道具，行军加速道具包，血量回复包等。在几种道具中选择最合适的道具包达到目标效果。许多游戏中的解决方法是使用贪心算法，这种只是一般可行解，并不被玩家接受。用动态规划算法可以构造出最优解。 动态规划过程是：每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划 我们先来构造一般意义上的最优解 假设当前我们在建造一个建筑，建筑需花费n小时的时间，玩家拥有3种道具a、b、c,分别能使建筑时间缩短1、2、3小时，我们来看看每个阶段的最优解情况&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>原文发布于微信公众号<a href="https://hweiwei.github.io/dashou/dong-tai-gui-hua-xian-ding-tiao-jian-qiu-zui-you-jie-2.html" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s?__biz=MzI4MDA3MTcyMA==&amp;mid=2247483680&amp;idx=1&amp;sn=49c0d6934538cac1fe79d0430459b8d1&amp;chksm=ebbf5a67dcc8d371ca1f64da1dc7b23637cbbf1fd58e521e2cd6f4d37b4dcc79277343c81375&amp;token=1598275063&amp;lang=zh_CN#rd</a></p>
<p>游戏中经常会用到一些buff道具，最常见的比如建造建筑时使用的时间缩短道具，行军加速道具包，血量回复包等。在几种道具中选择最合适的道具包达到目标效果。许多游戏中的解决方法是使用贪心算法，这种只是一般可行解，并不被玩家接受。用动态规划算法可以构造出最优解。</p>
<p>动态规划过程是：每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划</p>
<p>我们先来构造一般意义上的最优解</p>
<p>假设当前我们在建造一个建筑，建筑需花费n小时的时间，玩家拥有3种道具a、b、c,分别能使建筑时间缩短1、2、3小时，我们来看看每个阶段的最优解情况</p>
<table style="border-collapse: collapse; width: 115.1%; height: 325px;" border="1">
<tbody>
<tr>
<td style="width: 16.3569%;">道具\目标</td>
<td style="width: 16.6047%;">1</td>
<td style="width: 16.7286%;">2</td>
<td style="width: 16.8524%;">3</td>
<td style="width: 16.6049%;">4</td>
<td style="width: 16.8525%;">5</td>
</tr>
<tr>
<td style="width: 16.3569%;">道具a（缩短1小时）</td>
<td style="width: 16.6047%;">a*1</td>
<td style="width: 16.7286%;">a*2</td>
<td style="width: 16.8524%;">a*3</td>
<td style="width: 16.6049%;">a*4</td>
<td style="width: 16.8525%;">a*5</td>
</tr>
<tr>
<td style="width: 16.3569%;">道具b（缩短2小时）</td>
<td style="width: 16.6047%;">a*1</td>
<td style="width: 16.7286%;">b * 1</td>
<td style="width: 16.8524%;">b * 1+ a * 1</td>
<td style="width: 16.6049%;">b*2</td>
<td style="width: 16.8525%;">b * 2 + a * 1</td>
</tr>
<tr>
<td style="width: 16.3569%;">道具c（缩短3小时）</td>
<td style="width: 16.6047%;">a*1</td>
<td style="width: 16.7286%;">b*1</td>
<td style="width: 16.8524%;">c*1</td>
<td style="width: 16.6049%;">c * 1 + a * 1</td>
<td style="width: 16.8525%;">c *1 + b * 1</td>
</tr>
</tbody>
</table>
<p>我们来解释下表格所表达的意思，<strong>一般的我们认为在所有道具都参与的情况下的解决方案为最优解</strong>，并且优先使用时效长的道具</p>
<figure class="post__image"><img loading="lazy"  src="https://hweiwei.github.io/dashou/media/posts/9/640.png" alt="" width="723" height="168" sizes="100vw" srcset="https://hweiwei.github.io/dashou/media/posts/9/responsive/640-xs.png 300w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-sm.png 480w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-md.png 768w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-lg.png 1024w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-xl.png 1360w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-2xl.png 1600w"></figure>
<p> </p>
<p>当目标为缩短1小时的时候的最有解，结果为使用 1个道具a。同理，目标为2时使用一个b,目标为3时使用一个道具3。观察3中的第二列解</p>
<figure class="post__image"><img loading="lazy"  src="https://hweiwei.github.io/dashou/media/posts/9/640-1.png" alt="" width="206" height="43" sizes="100vw" srcset="https://hweiwei.github.io/dashou/media/posts/9/responsive/640-1-xs.png 300w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-1-sm.png 480w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-1-md.png 768w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-1-lg.png 1024w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-1-xl.png 1360w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-1-2xl.png 1600w"></figure>
<p> </p>
<p>意思为当目标为缩短3个小时时，在拥有道具a和b情况下的最有解。</p>
<p>至此，大家应该明白表格所表达的意思了吧。</p>
<p>现在，我们对道具数量做出限定，假定在b、c只拥有一个的情况下，求6小时的最优解。我们继续构造最优解表格</p>
<table style="border-collapse: collapse; width: 114.815%; height: 434px;" border="1">
<tbody>
<tr>
<td style="width: 15.4762%;">道具\目标</td>
<td style="width: 9.04762%;">1</td>
<td style="width: 9.40476%;">2</td>
<td style="width: 11.6667%;">3</td>
<td style="width: 28.3333%;">4</td>
<td style="width: 11.9048%;">5</td>
<td style="width: 14.1667%;">6</td>
</tr>
<tr>
<td style="width: 15.4762%;">道具a（缩短1小时）</td>
<td style="width: 9.04762%;">a*1</td>
<td style="width: 9.40476%;">a*2</td>
<td style="width: 11.6667%;">a*3</td>
<td style="width: 28.3333%;">a*4</td>
<td style="width: 11.9048%;">a*5</td>
<td style="width: 14.1667%;">a*6</td>
</tr>
<tr>
<td style="width: 15.4762%;">道具b（缩短2小时）*1</td>
<td style="width: 9.04762%;">a*1</td>
<td style="width: 9.40476%;">b * 1</td>
<td style="width: 11.6667%;">b * 1+ a * 1</td>
<td style="width: 28.3333%;">b * 1+a * 2(原则上b*2是最优解，b数量超出,需要找出b的替代解)</td>
<td style="width: 11.9048%;">b * 1 + a * 3</td>
<td style="width: 14.1667%;">b*1 + a * 4</td>
</tr>
<tr>
<td style="width: 15.4762%;">道具c（缩短3小时）*1</td>
<td style="width: 9.04762%;">a*1</td>
<td style="width: 9.40476%;">b*1</td>
<td style="width: 11.6667%;">c*1</td>
<td style="width: 28.3333%;">c * 1 + a * 1</td>
<td style="width: 11.9048%;">c *1 + b * 1</td>
<td style="width: 14.1667%;">c *1 + b * 1 + a * 1</td>
</tr>
</tbody>
</table>
<p>表格理解应该是没有难度了，现在我们来分析下如何用代码实现。。。中间省略无数，直接贴代码。新建一个html打开在控制台查看结果即可。</p>
<p><code>&lt;html&gt;</code></p>
<p><code>    &lt;body&gt;</code></p>
<p><code>       &lt;script&gt;</code></p>
<p><code>           const MAX = 1000000</code></p>
<p><code>           /**数组对象深拷贝*/</code></p>
<p><code>           function copy(list) {</code></p>
<p><code>               let obj</code></p>
<p><code>             let isArr = Array.isArray(list)</code></p>
<p><code>              let isObj = list != null &amp;&amp; list instanceof Object</code></p>
<p><code>            if (isArr) {</code></p>
<p><code>                   obj = []</code></p>
<p><code>                  for (let i = 0; i &lt; list.length; i++) {</code></p>
<p><code>                        obj[i] = copy(list[i])</code></p>
<p><code>                  }</code></p>
<p><code>               } else if (isObj) {</code></p>
<p><code>                  obj = {}</code></p>
<p><code>                  for (let i in list) {</code></p>
<p><code>                       obj[i] = copy(list[i])</code></p>
<p><code>                  }</code></p>
<p><code>               } else {</code></p>
<p><code>                    obj = list</code></p>
<p><code>              }</code></p>
<p><code>               return obj</code></p>
<p><code>         }</code></p>
<p><code>           //删除无效项</code></p>
<p><code>            function removeNoCount(list) {</code></p>
<p><code>               let len = list.length</code></p>
<p><code>             while (len--) {</code></p>
<p><code>                   if (list[len].count == 0) {</code></p>
<p><code>                       list.splice(len, 1)</code></p>
<p><code>                    }</code></p>
<p><code>             }</code></p>
<p><code>           }</code></p>
<p> </p>
<p><code>          function getBest(list, effect) {</code></p>
<p><code>                let keys = copy(list)</code></p>
<p><code>               removeNoCount(keys)</code></p>
<p><code>                let kinds = keys.length</code></p>
<p><code>             let allEffect = 0</code></p>
<p><code>              for (let i of list) {</code></p>
<p><code>                    allEffect += i.value * i.count</code></p>
<p><code>             }</code></p>
<p><code>               //所有效果总和不比需求来得大，不必计算</code></p>
<p><code>              if (allEffect &lt;= effect) {</code></p>
<p><code>                   return { value: MAX }</code></p>
<p><code>              }</code></p>
<p><code>                let values = []</code></p>
<p><code>             /**构建一个二位数组表，value为当前的结果值，id为存放道具id组合*/</code></p>
<p><code>                for (let i = 0; i &lt;= kinds; i++) {</code></p>
<p><code>                   values[i] = []</code></p>
<p><code>                 for (let j = 0; j &lt;= effect; j++) {</code></p>
<p><code>                      values[i][j] = {}</code></p>
<p><code>                       values[i][j]['value'] = MAX</code></p>
<p><code>                       values[i][j]['id'] = {}</code></p>
<p><code>                       for (let key of list) {</code></p>
<p><code>                           values[i][j]['id'][key.id] = 0</code></p>
<p><code>                       }</code></p>
<p><code>                    }</code></p>
<p><code>                   values[i][0]['value'] = 0</code></p>
<p><code>                }</code></p>
<p><code>                for (let i = 0; i &lt;= effect; i++) {</code></p>
<div>                    values[0][i]['value'] = MAX
<p><code>               }</code></p>
<p><code>               for (let eff = 1; eff &lt;= effect; eff++) {</code></p>
<p><code>                   for (let key = 1; key &lt;= kinds; key++) {</code></p>
<p><code>                       //如果左侧没有最优解，则当前项不可能有最优解</code></p>
<p><code>                     if (values[key][eff - 1].value == MAX) {</code></p>
<p><code>                          values[key][eff].value = MAX</code></p>
<p><code>                           continue</code></p>
<p><code>                      }</code></p>
<p><code>                      let value = keys[key - 1].value</code></p>
<p><code>                      let id = keys[key - 1].id</code></p>
<p><code>                        let upItem = values[key - 1][eff]</code></p>
<p><code>                      let nowItem = values[key][eff]</code></p>
<p><code>                        //如果目标值小于当前的道具效果值，将上一个目标结果与当前的效果值做比较，取小</code></p>
<p><code>                        //参考 需要目标值为1时的推导</code></p>
<p><code>                        if (eff &lt; value) {</code></p>
<p><code>                           let value1 = upItem.value //目标上一个结果值</code></p>
<p><code>                          if (value1 &lt; value) {</code></p>
<p><code>                               nowItem.value = value1</code></p>
<p><code>                              nowItem.id = copy(upItem.id)</code></p>
<p><code>                            } else {</code></p>
<p><code>                               nowItem.value = value</code></p>
<p><code>                               nowItem.id[id]++</code></p>
<p><code>                            }</code></p>
<p><code>                           continue</code></p>
<p><code>                       }</code></p>
<p><code>                       let leftItem = values[key][eff - value]</code></p>
<p><code>                        let canUsed = leftItem.id[id] &lt; keys[key - 1].count</code></p>
<br>
<p><code>                        //当前项不可用</code></p>
<p><code>                       if (!canUsed) {</code></p>
<p><code>                           for (let k = key - 1; k &gt; 0; k--) {</code></p>
<p><code>                               leftItem = copy(values[k][eff - value])</code></p>
<p><code>                                let canUsed = leftItem.id[id] &lt; keys[key - 1].count</code></p>
<p><code>                                break</code></p>
<p><code>                           }</code></p>
<p><code>                       }</code></p>
<p><code>                       if (leftItem.value == MAX) {</code></p>
<p><code>                         nowItem.value = MAX</code></p>
<p><code>                            continue</code></p>
<p><code>                        }</code></p>
<p><code>                       let value1 = upItem.value</code></p>
<p><code>                      let value2 = leftItem.value + value</code></p>
<p><code>                       if (value1 &lt; value2) {</code></p>
<p><code>                           nowItem.value = value1</code></p>
<p><code>                           nowItem.id = copy(upItem.id)</code></p>
<p><code>                       } else {</code></p>
<p><code>                          nowItem.value = value2</code></p>
<p><code>                          nowItem.id = copy(leftItem.id)</code></p>
<p><code>                          nowItem.id[id]++</code></p>
<p><code>                       }</code></p>
<p><code>                    }</code></p>
<p><code>              }</code></p>
<p><code>              console.log(values[kinds][effect])</code></p>
<p><code>                return values[kinds][effect]</code></p>
<p><code>          }</code></p>
<p><code>           let list = [</code></p>
<p><code>               { id: '时间道具a', value: 3, count: 6 },</code></p>
<p><code>                { id: '时间道具b', value: 5, count: 2 },</code></p>
<p><code>            { id: '时间道具c', value: 7, count: 2 },</code></p>
<p><code>              { id: '时间道具d', value: 99, count: 5 },</code></p>
<p><code>            ]</code></p>
<p><code>         let eff = 517</code></p>
<p><code>            getBest(list, eff)</code></p>
<p><code>       &lt;/script&gt;</code></p>
<p><code>    &lt;/body&gt;</code></p>
<p><code>&lt;/html&gt;</code></p>
<p><code></code></p>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>cocos热更动态版本地址研究</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/cocosre-geng-dong-tai-ban-ben-di-zhi-yan-jiu-2.html"/>
        <id>https://hweiwei.github.io/dashou/cocosre-geng-dong-tai-ban-ben-di-zhi-yan-jiu-2.html</id>

        <updated>2023-08-01T09:48:32+08:00</updated>
            <summary>
                <![CDATA[
                    cocos creator 2.x 版本中，关于热更的远程地址，版本等信息来源于工程中写入的project.manifest ，没有提供外部修改接口。如果想更自由的管理版本、热更地址配置，势必要修改源码。但是修改源码对于cocos&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>cocos creator 2.x 版本中，关于热更的远程地址，版本等信息来源于工程中写入的project.manifest ，没有提供外部修改接口。如果想更自由的管理版本、热更地址配置，势必要修改源码。但是修改源码对于cocos 引擎版本升级不够友好。经过研究jsb 相关内容，这边提供一个在不修改源码的情况下达到自由控制版本信息的方法。</p><ol>
<li>获取本地热更文件project.manifest 获得内容data 并解析</li>
</ol>
<pre><code>let asset = JSON.parse(data._nativeAsset);  
</code></pre>
<ol start="2">
<li>修改asset 内容</li>
</ol>
<pre><code>asset.packageUrl = this.serverUrl + HOT_PACKAGE + version;
asset.remoteManifestUrl = this.serverUrl + HOT_PACKAGE + version + manifest + &quot;/project.manifest&quot;;
asset.remoteVersionUrl = this.serverUrl + HOT_PACKAGE + version + manifest + &quot;/version.manifest&quot;;
</code></pre>
<ol start="3">
<li>判定是否存在存储的热更文件 jsb.fileUtils.isFileExist(this.storagePath + “/project.manifest”)，如果存在更新该文件</li>
</ol>
<pre><code class="language-if">    let str = jsb.fileUtils.getStringFromFile(this.storagePath + &quot;/project.manifest&quot;);
    let json = JSON.parse(str);
    json.packageUrl = asset.packageUrl;
    json.remoteManifestUrl = asset.remoteManifestUrl;
    json.remoteVersionUrl = asset.remoteVersionUrl;
    jsb.fileUtils.writeStringToFile(JSON.stringify(json), this.storagePath + &quot;/project.manifest&quot;);
}
</code></pre>
<p>这一步的目的是因为源码中，会优先使用存贮的热更文件</p><pre><code>// Compare with cached manifest to determine which one to use
if (cachedManifest)
{
    bool localNewer = _localManifest-&gt;versionGreater(cachedManifest, _versionCompareHandle);
    if (localNewer)
    {
        // Recreate storage, to empty the content
        _fileUtils-&gt;removeDirectory(_storagePath);
        _fileUtils-&gt;createDirectory(_storagePath);
        CC_SAFE_RELEASE(cachedManifest);
    }
    else
    {
        CC_SAFE_RELEASE(_localManifest);
        _localManifest = cachedManifest;
    }
}
</code></pre>
<ol start="4">
<li>构造新的manifest 对象</li>
</ol>
<pre><code>let mani = new jsb.Manifest(JSON.stringify(asset), this.storagePath);
</code></pre>
<p>5.热更管理器加载该配置对象即可。</p><pre><code>this._assetManager.loadLocalManifest(mani, this.storagePath);
</code></pre>
<p><em><strong>注意</strong></em>：在构造热更管理器时不要传入原始的manifest 文件，否则loadLocalManifest方法将失效</p><pre><code>this._assetManager = new jsb.AssetsManager(&quot;&quot;, this.storagePath, this.versionCompareHandle);
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>shader 之闪电特效</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/shader-zhi-shan-dian-te-xiao.html"/>
        <id>https://hweiwei.github.io/dashou/shader-zhi-shan-dian-te-xiao.html</id>

        <updated>2022-10-08T15:20:39+08:00</updated>
            <summary></summary>
        <content type="html">
            <![CDATA[
                
  <p>
    
  </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>解决2.4.x ios 真机闪退问题</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/jie-jue-24x-ios-zhen-ji-shan-tui-wen-ti.html"/>
        <id>https://hweiwei.github.io/dashou/jie-jue-24x-ios-zhen-ji-shan-tui-wen-ti.html</id>

        <updated>2022-09-23T10:43:08+08:00</updated>
            <summary>
                <![CDATA[
                    由于 jit 不支持ios ，引擎错误开启支持导致。修改 \cocos2d-x\cocos\scripting\js-bindings\jswrapper\v8\ScriptEngine.cpp&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>由于 jit 不支持ios ，引擎错误开启支持导致。修改 \cocos2d-x\cocos\scripting\js-bindings\jswrapper\v8\ScriptEngine.cpp 该路径下方法jitSupported</p><pre><code>
bool jitSupported() {
            #if CC_IOS_FORCE_DISABLE_JIT
            return false;
            #elif TARGET_CPU_X86 || TARGET_CPU_X86_64
            return true;
            #else
            
            //2022.7.1 暂时移除其他版本jit支持，解决真机闪退问题
//            // Check for arm64e.
//            cpu_type_t cpuType = 0;
//            size_t cpuTypeSize = sizeof(cpu_type_t);
//            if (::sysctlbyname(&quot;hw.cputype&quot;, &amp;cpuType, &amp;cpuTypeSize, nullptr, 0) &lt; 0) {
//                SE_LOGD(&quot;Could not execute sysctl() to get CPU type: %s&quot;, strerror(errno));
//            }
//
//            cpu_subtype_t cpuSubType = 0;
//            if (::sysctlbyname(&quot;hw.cpusubtype&quot;, &amp;cpuSubType, &amp;cpuTypeSize, nullptr, 0) &lt; 0) {
//                SE_LOGD(&quot;Could not execute sysctl() to get CPU subtype: %s&quot;, strerror(errno));
//            }
//
//            // Tracing is necessary unless the device is arm64e (A12 chip or higher).
//            if (cpuType != CPU_TYPE_ARM64 || cpuSubType != CPU_SUBTYPE_ARM64E) {
//                return false;
//            }
//
//            // Check for iOS 14.2 and higher.
//            size_t osVersionSize;
//            ::sysctlbyname(&quot;kern.osversion&quot;, NULL, &amp;osVersionSize, NULL, 0);
//            char osversionBuffer[osVersionSize];
//
//            if (::sysctlbyname(&quot;kern.osversion&quot;, osversionBuffer, &amp;osVersionSize, NULL, 0) &lt; 0) {
//                SE_LOGD(&quot;Could not execute sysctl() to get current OS version: %s&quot;, strerror(errno));
//                return false;
//            }
//
//            int majorVersion = 0;
//            char minorLetter = &#39;Z&#39;;
//
//            for (size_t index = 0; index &lt; osVersionSize; index++) {
//                char version_char = osversionBuffer[index];
//                // Find the minor version build letter.
//                if (isalpha(version_char)) {
//                    majorVersion = atoi((const char*)osversionBuffer);
//                    minorLetter = toupper(version_char);
//                    break;
//                }
//            }
//            // 18B92 is iOS 14.2 beta release candidate where tracing became unnecessary.
//            return majorVersion &gt; 18 || (majorVersion == 18 &amp;&amp; minorLetter &gt;= &#39;B&#39;);
            return false;
            #endif //TARGET_CPU_X86 || TARGET_CPU_X86_64
        }
                
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>ios 覆盖安装问题研究</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/guan-yu-cocos-creator-duo-bundle-re-geng-yan-jiu.html"/>
        <id>https://hweiwei.github.io/dashou/guan-yu-cocos-creator-duo-bundle-re-geng-yan-jiu.html</id>

        <updated>2022-08-18T16:27:38+08:00</updated>
            <summary>
                <![CDATA[
                    在实现cocos热更方案过程中，一切都很顺利。所有工作完成之后，发现ios 在覆盖安装之后，如果没有清理缓存，即使安装的版本是旧的也不会进行热更。这种情况，比较好理解，版本文件还在，所以比对版本文件没有问题就不会进行热更。真正出问题的是游戏启动后，竟然使用的脚本是覆盖安装后的，而不是热更缓存的。这个问题挺头疼。 经过研究发现，覆盖安装后的ios包，并不是在原来的安装包内存上覆盖替换，而是会把旧包的内存清理掉，在新的内存上安装包。放在游戏内理解即WritablePath 发生了变化，所以我们在官方的热更方案上，将新的发现加了上去
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>在实现cocos热更方案过程中，一切都很顺利。所有工作完成之后，发现ios 在覆盖安装之后，如果没有清理缓存，即使安装的版本是旧的也不会进行热更。这种情况，比较好理解，版本文件还在，所以比对版本文件没有问题就不会进行热更。真正出问题的是游戏启动后，竟然使用的脚本是覆盖安装后的，而不是热更缓存的。这个问题挺头疼。</p>
<p>经过研究发现，覆盖安装后的ios包，并不是在原来的安装包内存上覆盖替换，而是会把旧包的内存清理掉，在新的内存上安装包。放在游戏内理解即<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">WritablePath 发生了变化，所以我们在官方的热更方案上，将新的发现加了上去</span></p>
<p><code></code></p>
<div>
<div>let writablepath = jsb.fileUtils.getWritablePath();</div>
<div>    var hotUpdateSearchPaths = localStorage.getItem("HotUpdateSearchPaths");</div>
<br>
<div>    if (hotUpdateSearchPaths &amp;&amp; hotUpdateSearchPaths.indexOf(writablepath) != -1) {</div>
<div>        var paths = JSON.parse(hotUpdateSearchPaths);</div>
<div>        jsb.fileUtils.setSearchPaths(paths);</div>
<div>        var fileList = [];</div>
<div>        var storagePath = paths[0] || "";</div>
<div>        var tempPath = storagePath + "_temp/";</div>
<div>        var baseOffset = tempPath.length;</div>
<br>
<div>        if (jsb.fileUtils.isDirectoryExist(tempPath) &amp;&amp; !jsb.fileUtils.isFileExist(tempPath + "project.manifest.temp")) {</div>
<div>            jsb.fileUtils.listFilesRecursively(tempPath, fileList);</div>
<div>            fileList.forEach((srcPath) =&gt; {</div>
<div>                var relativePath = srcPath.substr(baseOffset);</div>
<div>                var dstPath = storagePath + relativePath;</div>
<br>
<div>                if (srcPath[srcPath.length] == "/") {</div>
<div>                    cc.fileUtils.createDirectory(dstPath);</div>
<div>                } else {</div>
<div>                    if (cc.fileUtils.isFileExist(dstPath)) {</div>
<div>                        cc.fileUtils.removeFile(dstPath);</div>
<div>                    }</div>
<div>                    cc.fileUtils.renameFile(srcPath, dstPath);</div>
<div>                }</div>
<div>            });</div>
<div>            cc.fileUtils.removeDirectory(tempPath);</div>
<div>        }</div>
<div>    } else {</div>
<div>        let path = writablepath + "remote-hot/hall"; //热更存放路径添加</div>
<div>        jsb.fileUtils.addSearchPath(path, true);</div>
<div>    }</div>
</div>
<p><code></code></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>异形屏适配组件</title>
        <author>
            <name>黄伟伟</name>
        </author>
        <link href="https://hweiwei.github.io/dashou/safearea-component.html"/>
        <id>https://hweiwei.github.io/dashou/safearea-component.html</id>

        <updated>2022-08-17T15:31:56+08:00</updated>
            <summary>
                <![CDATA[
                    cocos creator 提供了safeArea 组件来适配刘海屏的情况，但是该组件只能在根节点生效，并且全屏适配，并不是很友好。我们仿造他实现一个轻量的子节点左右适配。实现如下： const&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="cocos-creator-提供了safearea-组件来适配刘海屏的情况，但是该组件只能在根节点生效，并且全屏适配，并不是很友好。我们仿造他实现一个轻量的子节点左右适配。实现如下：">cocos creator 提供了safeArea 组件来适配刘海屏的情况，但是该组件只能在根节点生效，并且全屏适配，并不是很友好。我们仿造他实现一个轻量的子节点左右适配。实现如下：</h3>
<pre><code>
const { ccclass, property, menu, executeInEditMode, requireComponent, executionOrder } = cc._decorator;
@ccclass
@executeInEditMode
@requireComponent(cc.Widget)
@executionOrder(1000)
@menu(&quot;tools/SafeArea&quot;)
export default class SafeArea extends cc.Component {
    @property({
        tooltip: &quot;异形屏适配&quot;,
        displayName: &quot;适配左边&quot;,
    })
    left: boolean = true;

    @property({
        tooltip: &quot;异形屏适配&quot;,
        displayName: &quot;适配右边&quot;,
    })
    right: boolean = false;

    onLoad() {
        let widget = this.node.getComponent(cc.Widget);
        if (!widget) {
            return;
        }
        widget.updateAlignment();

        let safeArea = cc.sys.getSafeAreaRect();
        let viewsize = cc.winSize;
        let widthOffset = viewsize.width - safeArea.width;

        if (this.left &amp;&amp; widget.isAlignLeft) {
            widget.left += safeArea.x;
        }

        if (this.right &amp;&amp; widget.isAlignRight) {
            widget.right += widthOffset - safeArea.x;
        }

        widget.updateAlignment();
    }

    protected onEnable(): void {}
}
</code></pre>

            ]]>
        </content>
    </entry>
</feed>
