{
    "version": "https://jsonfeed.org/version/1",
    "title": "大手游戏",
    "description": "",
    "home_page_url": "https://hweiwei.github.io/dashou",
    "feed_url": "https://hweiwei.github.io/dashou/feed.json",
    "user_comment": "",
    "author": {
        "name": "黄伟伟"
    },
    "items": [
        {
            "id": "https://hweiwei.github.io/dashou/cocosre-geng-dong-tai-ban-ben-di-zhi-yan-jiu.html",
            "url": "https://hweiwei.github.io/dashou/cocosre-geng-dong-tai-ban-ben-di-zhi-yan-jiu.html",
            "title": "cocos热更动态版本地址研究",
            "summary": "cocos creator 2.x 版本中，关于热更的远程地址，版本等信息来源于工程中写入的project.manifest ，没有提供外部修改接口。如果想更自由的管理版本、热更地址配置，势必要修改源码。但是修改源码对于cocos 引擎版本升级不够友好。经过研究jsb 相关内容，这边提供一个在不修改源码的情况下达到自由控制版本信息的方法。 let asset = JSON.parse(data._nativeAsset);",
            "content_html": "<p>cocos creator 2.x 版本中，关于热更的远程地址，版本等信息来源于工程中写入的project.manifest ，没有提供外部修改接口。如果想更自由的管理版本、热更地址配置，势必要修改源码。但是修改源码对于cocos 引擎版本升级不够友好。经过研究jsb 相关内容，这边提供一个在不修改源码的情况下达到自由控制版本信息的方法。</p>\n<p> </p>\n<ol>\n<li>获取本地热更文件project.manifest 获得内容data 并解析 </li>\n</ol>\n<p><code><span class=\"code-snippet__keyword\">let</span> asset =</code> <span class=\"code-snippet__built_in\">JSON</span>.parse(data._nativeAsset);</p>\n<ol>\n<li> </li>\n</ol>\n<p> </p>",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2022-08-25T17:47:34+08:00",
            "date_modified": "2022-08-25T19:49:54+08:00"
        },
        {
            "id": "https://hweiwei.github.io/dashou/guan-yu-cocos-creator-duo-bundle-re-geng-yan-jiu.html",
            "url": "https://hweiwei.github.io/dashou/guan-yu-cocos-creator-duo-bundle-re-geng-yan-jiu.html",
            "title": "ios 覆盖安装问题研究",
            "summary": "在实现cocos热更方案过程中，一切都很顺利。所有工作完成之后，发现ios 在覆盖安装之后，如果没有清理缓存，即使安装的版本是旧的也不会进行热更。这种情况，比较好理解，版本文件还在，所以比对版本文件没有问题就不会进行热更。真正出问题的是游戏启动后，竟然使用的脚本是覆盖安装后的，而不是热更缓存的。这个问题挺头疼。",
            "content_html": "<p>在实现cocos热更方案过程中，一切都很顺利。所有工作完成之后，发现ios 在覆盖安装之后，如果没有清理缓存，即使安装的版本是旧的也不会进行热更。这种情况，比较好理解，版本文件还在，所以比对版本文件没有问题就不会进行热更。真正出问题的是游戏启动后，竟然使用的脚本是覆盖安装后的，而不是热更缓存的。这个问题挺头疼。</p>",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2022-08-18T16:27:38+08:00",
            "date_modified": "2022-08-25T17:45:44+08:00"
        },
        {
            "id": "https://hweiwei.github.io/dashou/safearea-component.html",
            "url": "https://hweiwei.github.io/dashou/safearea-component.html",
            "title": "异形屏适配组件",
            "summary": "cocos creator 提供了safeArea 组件来适配刘海屏的情况，但是该组件只能在根节点生效，并且全屏适配，并不是很友好。我们仿造他实现一个轻量的子节点左右适配。实现如下： const { ccclass, property, menu, executeInEditMode, requireComponent, executionOrder } = cc._decorator; @ccclass @executeInEditMode @requireComponent(cc.Widget) @executionOrder(1000) @menu(&quot;tools/SafeArea&quot;) export default class SafeArea extends cc.Component { @property({ tooltip: &quot;异形屏适配&quot;, displayName: &quot;适配左边&quot;, }) left: boolean = true; @property({ tooltip: &quot;异形屏适配&quot;, displayName: &quot;适配右边&quot;, }) right: boolean&hellip;",
            "content_html": "<h3 id=\"cocos-creator-提供了safearea-组件来适配刘海屏的情况，但是该组件只能在根节点生效，并且全屏适配，并不是很友好。我们仿造他实现一个轻量的子节点左右适配。实现如下：\">cocos creator 提供了safeArea 组件来适配刘海屏的情况，但是该组件只能在根节点生效，并且全屏适配，并不是很友好。我们仿造他实现一个轻量的子节点左右适配。实现如下：</h3>\n<pre><code>\nconst { ccclass, property, menu, executeInEditMode, requireComponent, executionOrder } = cc._decorator;\n@ccclass\n@executeInEditMode\n@requireComponent(cc.Widget)\n@executionOrder(1000)\n@menu(&quot;tools/SafeArea&quot;)\nexport default class SafeArea extends cc.Component {\n    @property({\n        tooltip: &quot;异形屏适配&quot;,\n        displayName: &quot;适配左边&quot;,\n    })\n    left: boolean = true;\n\n    @property({\n        tooltip: &quot;异形屏适配&quot;,\n        displayName: &quot;适配右边&quot;,\n    })\n    right: boolean = false;\n\n    onLoad() {\n        let widget = this.node.getComponent(cc.Widget);\n        if (!widget) {\n            return;\n        }\n        widget.updateAlignment();\n\n        let safeArea = cc.sys.getSafeAreaRect();\n        let viewsize = cc.winSize;\n        let widthOffset = viewsize.width - safeArea.width;\n\n        if (this.left &amp;&amp; widget.isAlignLeft) {\n            widget.left += safeArea.x;\n        }\n\n        if (this.right &amp;&amp; widget.isAlignRight) {\n            widget.right += widthOffset - safeArea.x;\n        }\n\n        widget.updateAlignment();\n    }\n\n    protected onEnable(): void {}\n}\n</code></pre>\n",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2022-08-17T15:31:56+08:00",
            "date_modified": "2022-08-18T09:16:38+08:00"
        }
    ]
}
