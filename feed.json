{
    "version": "https://jsonfeed.org/version/1",
    "title": "大手游戏",
    "description": "",
    "home_page_url": "https://hweiwei.github.io/dashou",
    "feed_url": "https://hweiwei.github.io/dashou/feed.json",
    "user_comment": "",
    "author": {
        "name": "黄伟伟"
    },
    "items": [
        {
            "id": "https://hweiwei.github.io/dashou/scrollview-you-hua-kuo-zhan.html",
            "url": "https://hweiwei.github.io/dashou/scrollview-you-hua-kuo-zhan.html",
            "title": "scrollview 优化扩展",
            "summary": "论坛上的关于scrollview的列表优化有很多文章，这边提供一个新思路，用于在子节点尺寸不同情况下的使用方案",
            "content_html": "<p>论坛上的关于scrollview的列表优化有很多文章，这边提供一个新思路，用于在子节点尺寸不同情况下的使用方案</p>",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2024-09-29T16:53:50+08:00",
            "date_modified": "2024-09-29T16:53:50+08:00"
        },
        {
            "id": "https://hweiwei.github.io/dashou/jie-jue-iosre-geng-di-zhi-shi-xiao-wen-ti.html",
            "url": "https://hweiwei.github.io/dashou/jie-jue-iosre-geng-di-zhi-shi-xiao-wen-ti.html",
            "title": "解决ios热更地址失效问题",
            "summary": "ios 在非正常换包情况下，会使原来的热更地址失效，那么我们需要判定当前的writePath是否是有添加进读取目录的，将引擎提供的热更模版修改下就能达到目的，直接上代码 var loadSearchPaths =&hellip;",
            "content_html": "<p>ios 在非正常换包情况下，会使原来的热更地址失效，那么我们需要判定当前的writePath是否是有添加进读取目录的，将引擎提供的热更模版修改下就能达到目的，直接上代码</p><pre><code>var loadSearchPaths = function () {\n    let writablepath = jsb.fileUtils.getWritablePath();\n    var hotUpdateSearchPaths = localStorage.getItem(&quot;HotUpdateSearchPaths&quot;);\n    if (hotUpdateSearchPaths &amp;&amp; hotUpdateSearchPaths.indexOf(writablepath) != -1) {\n        var paths = JSON.parse(hotUpdateSearchPaths);\n        jsb.fileUtils.setSearchPaths(paths);\n        var fileList = [];\n        var storagePath = paths[0] || &quot;&quot;;\n        var tempPath = storagePath + &quot;_temp/&quot;;\n        var baseOffset = tempPath.length;\n\n        if (jsb.fileUtils.isDirectoryExist(tempPath) &amp;&amp; !jsb.fileUtils.isFileExist(tempPath + &quot;project.manifest.temp&quot;)) {\n            jsb.fileUtils.listFilesRecursively(tempPath, fileList);\n            fileList.forEach((srcPath) =&gt; {\n                var relativePath = srcPath.substr(baseOffset);\n                var dstPath = storagePath + relativePath;\n\n                if (srcPath[srcPath.length] == &quot;/&quot;) {\n                    cc.fileUtils.createDirectory(dstPath);\n                } else {\n                    if (cc.fileUtils.isFileExist(dstPath)) {\n                        cc.fileUtils.removeFile(dstPath);\n                    }\n                    cc.fileUtils.renameFile(srcPath, dstPath);\n                }\n            });\n            cc.fileUtils.removeDirectory(tempPath);\n        }\n    } else {\n        let path = writablepath + &quot;remote-hot/hall&quot;;\n        jsb.fileUtils.addSearchPath(path, true);\n    }\n};\n</code></pre>\n",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2024-07-30T15:30:06+08:00",
            "date_modified": "2024-07-30T15:30:06+08:00"
        },
        {
            "id": "https://hweiwei.github.io/dashou/bei-sai-er-qu-xian-yan-jiu-2.html",
            "url": "https://hweiwei.github.io/dashou/bei-sai-er-qu-xian-yan-jiu-2.html",
            "title": "贝塞尔曲线研究",
            "summary": "核心公式： /** * * @param&hellip;",
            "content_html": "<p>核心公式：</p><pre><code> /**\n     *\n     * @param C1 起始点\n     * @param C2 控制点1\n     * @param C3 控制点2\n     * @param C4 目标点\n     * @param t  时间拟合\n     * @returns\n     */\n    bezier(C1, C2, C3, C4, t) {\n        var t1 = 1 - t;\n        return t1 * (t1 * (C1 + (C2 * 3 - C1) * t) + C3 * 3 * t * t) + C4 * t * t * t;\n    }\n</code></pre>\n<p>按照该公式，可以在三维中分别实现x,y,z轴的贝塞尔曲线变化，达到三维贝塞尔曲线效果，二维只用实现x,y坐标即可</p>",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2024-05-13T19:01:40+08:00",
            "date_modified": "2024-05-13T19:01:40+08:00"
        },
        {
            "id": "https://hweiwei.github.io/dashou/guan-yu-charmo-shi-wen-ben-huan-cun-cha-kan-yan-jiu.html",
            "url": "https://hweiwei.github.io/dashou/guan-yu-charmo-shi-wen-ben-huan-cun-cha-kan-yan-jiu.html",
            "title": "关于char模式文本缓存查看研究",
            "summary": "怎么查看char模式文本缓存内容？我们可以借鉴官方关于动态合图的方式在场景的最上层加上一层来显示char缓存的文本内容，废话不多说，直接上代码 小伙伴们如果不知道什么是自执行函数，随便新建一个文件后缀名改成ts,将上面代码拷入文件中既能生效",
            "content_html": "<p class=\"msg msg--info\">怎么查看char模式文本缓存内容？我们可以借鉴官方关于动态合图的方式在场景的最上层加上一层来显示char缓存的文本内容，废话不多说，直接上代码</p>\n<p><code></code></p>\n<div>\n<div>(() =&gt; {</div>\n<div>    //@ts-ignore</div>\n<div>    cc.Label.prototype.showDebug = function (show) {</div>\n<div>        if (show) {</div>\n<div>            if (!this._debugNode || !this._debugNode.isValid) {</div>\n<div>                let width = cc.visibleRect.width;</div>\n<div>                let height = cc.visibleRect.height;</div>\n<br>\n<div>                this._debugNode = new cc.Node(\"SHAREATLAS_DEBUG_NODE\");</div>\n<div>                this._debugNode.width = width;</div>\n<div>                this._debugNode.height = height;</div>\n<div>                this._debugNode.x = width / 2;</div>\n<div>                this._debugNode.y = height / 2;</div>\n<div>                this._debugNode.zIndex = cc.macro.MAX_ZINDEX;</div>\n<div>                this._debugNode.parent = cc.director.getScene();</div>\n<br>\n<div>                //@ts-ignore</div>\n<div>                this._debugNode.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;</div>\n<div>                //@ts-ignore</div>\n<div>                cc.Camera._setupDebugCamera();</div>\n<br>\n<div>                let scroll = this._debugNode.addComponent(cc.ScrollView);</div>\n<br>\n<div>                let content = new cc.Node(\"CONTENT\");</div>\n<div>                let layout = content.addComponent(cc.Layout);</div>\n<div>                layout.type = cc.Layout.Type.VERTICAL;</div>\n<div>                layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;</div>\n<div>                content.parent = this._debugNode;</div>\n<div>                content.width = 2048;</div>\n<div>                content.anchorY = 1;</div>\n<div>                content.x = 2048;</div>\n<br>\n<div>                scroll.content = content;</div>\n<br>\n<div>                let node = new cc.Node(\"ATLAS\");</div>\n<div>                //@ts-ignore</div>\n<div>                let texture = cc.Label._shareAtlas.getTexture();</div>\n<div>                let spriteFrame = new cc.SpriteFrame();</div>\n<div>                spriteFrame.setTexture(texture);</div>\n<br>\n<div>                let sprite = node.addComponent(cc.Sprite);</div>\n<div>                sprite.spriteFrame = spriteFrame;</div>\n<br>\n<div>                node.parent = content;</div>\n<div>            }</div>\n<div>            return this._debugNode;</div>\n<div>        } else {</div>\n<div>            if (this._debugNode) {</div>\n<div>                this._debugNode.parent = null;</div>\n<div>                this._debugNode = null;</div>\n<div>            }</div>\n<div>        }</div>\n<div>    };</div>\n<div>})();</div>\n<div> </div>\n<div>直接写一个自执行函数为 cc.Label.prototype 添加一个 showDebug 方法。之后就可以在控制台上执行方法来查看char文本缓存</div>\n<div>我们来看下效果：</div>\n<div><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://hweiwei.github.io/dashou/media/posts/13/tup.jpg\" alt=\"\" width=\"923\" height=\"1045\" sizes=\"100vw\" srcset=\"https://hweiwei.github.io/dashou/media/posts/13/responsive/tup-xs.jpg 300w ,https://hweiwei.github.io/dashou/media/posts/13/responsive/tup-sm.jpg 480w ,https://hweiwei.github.io/dashou/media/posts/13/responsive/tup-md.jpg 768w ,https://hweiwei.github.io/dashou/media/posts/13/responsive/tup-lg.jpg 1024w ,https://hweiwei.github.io/dashou/media/posts/13/responsive/tup-xl.jpg 1360w ,https://hweiwei.github.io/dashou/media/posts/13/responsive/tup-2xl.jpg 1600w\"></figure></div>\n<div> </div>\n<div>在控制台执行cc.Label.prototype.showDebug(true) 方法则可以在场景最上层看到当前的文本缓存。小伙伴们执行的时候可能会出现看不见的情况，别慌，因为默认设置了图层大小为2048*2048 ，拖动一下就能看到了。</div>\n<div>在控制台执行cc.Label.prototype.showDebug(false) 将关闭显示</div>\n<div> </div>\n<p class=\"msg msg--info\">小伙伴们如果不知道什么是自执行函数，随便新建一个文件后缀名改成ts,将上面代码拷入文件中既能生效</p>\n<div> </div>\n<div> </div>\n<div> </div>\n</div>\n<p> </p>",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2023-10-11T17:26:25+08:00",
            "date_modified": "2023-10-11T17:36:54+08:00"
        },
        {
            "id": "https://hweiwei.github.io/dashou/tsming-ming-kong-jian-he-bing.html",
            "url": "https://hweiwei.github.io/dashou/tsming-ming-kong-jian-he-bing.html",
            "title": "ts命名空间合并",
            "summary": "在用ts 开发游戏的时候,发现命名空间使用比较不友好，需要文件引入以及使用声明文件.d.ts才能做到很好的代码提示，但是在复杂类设计的情况下.d.ts书写起来也比较费劲，于是开始研究怎么才能做到用命名空间隔离作用域并且能够有很好的使用体验。当前主要实现方式是挂载在windows底下，并且将同命名空间下的对象合并，来达到效果，效果比较理想。上代码： //UIMgr.ts文件实现 /* *&hellip;",
            "content_html": "<p>在用ts 开发游戏的时候,发现命名空间使用比较不友好，需要文件引入以及使用声明文件.d.ts才能做到很好的代码提示，但是在复杂类设计的情况下.d.ts书写起来也比较费劲，于是开始研究怎么才能做到用命名空间隔离作用域并且能够有很好的使用体验。当前主要实现方式是挂载在windows底下，并且将同命名空间下的对象合并，来达到效果，效果比较理想。上代码：</p><pre><code>//UIMgr.ts文件实现 \n/*\n * @author: huangww\n * @Date: 2021-03-08 17:16:30\n * @LastEditTime: 2021-03-08 17:42:48\n * @FilePath: \\ept\\assets\\Script\\core\\UIMgr.ts\n */\n namespace core {\n    class UIMgr {\n        /**测试UI */\n        test() {\n            console.log(&quot;UI TEST&quot;);\n        }\n    }\n    export const ui = new UIMgr();\n}\nif (!window[&quot;core&quot;]) {\n    window[&quot;core&quot;] = core;\n} else {\n    Object.assign(window[&quot;core&quot;], core);\n}\n</code></pre>\n<pre><code>\n//EventMgr.ts文件实现 \n/*\n * @author: huangww\n * @Date: 2021-03-08 17:16:39\n * @LastEditTime: 2021-03-08 17:44:21\n * @FilePath: \\ept\\assets\\Script\\core\\EventMgr.ts\n */\nnamespace core {\n    /**全局变量跨文件使用测试 */\n    export const test = {\n        test: function () {\n            core.ui.test();\n        },\n    };\n\n    /**事件测试类 */\n    class EventMgr {\n        //test\n        test() {\n            console.log(&quot;EVENT TEST&quot;);\n        }\n    }\n    /**\n     *事件测试类实例\n     */\n    export const event = new EventMgr();\n}\nif (!window[&quot;core&quot;]) {\n    window[&quot;core&quot;] = core;\n} else {\n    Object.assign(window[&quot;core&quot;], core);\n}\n</code></pre>\n<p>在代码中即可直接使用core全局对象来访问</p><pre><code>core.event.test();core.test.test();\ncore.ui.test();\ncore .event.test():\n</code></pre>\n",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2023-10-10T11:20:48+08:00",
            "date_modified": "2023-10-10T11:27:58+08:00"
        },
        {
            "id": "https://hweiwei.github.io/dashou/cocos-webview-tian-jia-guan-bi-an-niu-androidpian.html",
            "url": "https://hweiwei.github.io/dashou/cocos-webview-tian-jia-guan-bi-an-niu-androidpian.html",
            "title": "cocos-webview 添加关闭按钮-android篇",
            "summary": "**前言：cocos webview 作为一个独立的容器在ui层级之上，所以我们想通过游戏内ui来操控它是不容易的事情，把操作ui直接加到webview 容器层上，可以解决这个问题 **&hellip;",
            "content_html": "<p>**前言：cocos webview 作为一个独立的容器在ui层级之上，所以我们想通过游戏内ui来操控它是不容易的事情，把操作ui直接加到webview 容器层上，可以解决这个问题 **</p><p>观察cocos2dxWebViewHelper 发现，cocos 通过这个类来管理游戏内的webview，所以我们只需要控制好在创建，销毁 webview 的时候，将相关ui做同样的动作即可</p><p>这边先实现下关闭按钮的创建。\n在 cocos2dxWebViewHelper中添加方法</p><pre><code>    public static void createSkipButton(int index) {\n\n        skipImgBtn = new ImageView(sCocos2dxActivity);\n//        skipImgBtn.setRotation(90);\n        //定义矩阵对象\n        Matrix matrix = new Matrix();\n        matrix.setRotate(90);\n        //缩放原图\n        // matrix.postScale(1.5f, 1.5f);\n        float w = 0;\n        float h = 0;\n\n        Bitmap bitmap;\n        Bitmap dstbmp;\n        bitmap = BitmapFactory.decodeResource(sCocos2dxActivity.getResources(), R.drawable.skip);\n        dstbmp = Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(), bitmap.getHeight(),matrix,true);\n        skipImgBtn.setImageBitmap(dstbmp);\n        w = dstbmp.getWidth();\n        h = dstbmp.getHeight();\n        //获取屏幕尺寸几种方式\n        // 参考文档 http://blog.csdn.net/ithomer/article/details/6688883\n        DisplayMetrics dm = new DisplayMetrics();\n        sCocos2dxActivity.getWindowManager().getDefaultDisplay().getMetrics(dm);\n\n        FrameLayout.LayoutParams params = new FrameLayout.LayoutParams((int)w, (int)h);\n\n        params.leftMargin = (int) (sCocos2dxActivity.getWindowManager().getDefaultDisplay().getWidth()-w-20);\n        params.topMargin = (int) (sCocos2dxActivity.getWindowManager().getDefaultDisplay().getHeight()-h);\n\n        Cocos2dxWebView view = webViews.get(index);\n        view.skipImgBtn = skipImgBtn;\n\n        btnIndex = index;\n\n        skipImgBtn.bringToFront();\n        sLayout.addView(skipImgBtn,params);\n\n        skipImgBtn.invalidate();\n        skipImgBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                removeWebView(btnIndex);\n            }\n        });\n\n    }\n        \n</code></pre>\n<p>来创建关闭按钮\n添加移除方法</p><pre><code>public static void removeSkipBtn(){\n        if (skipImgBtn!= null){\n            sLayout.removeView(skipImgBtn);\n            skipImgBtn = null;\n        }\n    }\n</code></pre>\n<p>skipImgBtn   记得在类中声明</p><pre><code>private static ImageView skipImgBtn = null;\n    private static int btnIndex = 0;\n</code></pre>\n<p>方法实现完之后，只需在createWebView 方法中 跟着创建即可</p><pre><code> public static int createWebView() {\n        final int index = viewTag;\n        sCocos2dxActivity.runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                Cocos2dxWebView webView = new Cocos2dxWebView(sCocos2dxActivity, index);\n                FrameLayout.LayoutParams lParams = new FrameLayout.LayoutParams(\n                        FrameLayout.LayoutParams.WRAP_CONTENT,\n                        FrameLayout.LayoutParams.WRAP_CONTENT);\n                sLayout.addView(webView, lParams);\n\n                webViews.put(index, webView);\n                createSkipButton(index);\n            }\n        });\n        return viewTag++;\n    }\n</code></pre>\n<p>在移除中跟着移除</p><pre><code>public static void removeWebView(final int index) {\n        sCocos2dxActivity.runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                Cocos2dxWebView webView = webViews.get(index);\n                if (webView != null) {\n                    webViews.remove(index);\n                    sLayout.removeView(webView);\n                    webView.destroy();\n                    webView = null;\n                }\n\n                removeSkipBtn();\n            }\n        });\n    }\n</code></pre>\n<p>别忘了在显隐控制中，跟着操作</p><pre><code> public static void setVisible(final int index, final boolean visible) {\n        sCocos2dxActivity.runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                Cocos2dxWebView webView = webViews.get(index);\n                if (webView != null) {\n                    webView.setVisibility(visible ? View.VISIBLE : View.GONE);\n                }\n                if (skipImgBtn!= null){\n                    skipImgBtn.setVisibility(visible ? View.VISIBLE : View.GONE);\n                }\n            }\n        });\n    }\n</code></pre>\n<p>这样子就实现了在cocos webview 上添加关闭按钮的功能。</p>",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2023-08-03T09:47:03+08:00",
            "date_modified": "2023-08-03T09:47:33+08:00"
        },
        {
            "id": "https://hweiwei.github.io/dashou/dong-tai-gui-hua-xian-ding-tiao-jian-qiu-zui-you-jie-2.html",
            "url": "https://hweiwei.github.io/dashou/dong-tai-gui-hua-xian-ding-tiao-jian-qiu-zui-you-jie-2.html",
            "title": "动态规划-限定条件求最优解",
            "summary": "原文发布于微信公众号https://mp.weixin.qq.com/s?__biz=MzI4MDA3MTcyMA==&amp;mid=2247483680&amp;idx=1&amp;sn=49c0d6934538cac1fe79d0430459b8d1&amp;chksm=ebbf5a67dcc8d371ca1f64da1dc7b23637cbbf1fd58e521e2cd6f4d37b4dcc79277343c81375&amp;token=1598275063&amp;lang=zh_CN#rd 游戏中经常会用到一些buff道具，最常见的比如建造建筑时使用的时间缩短道具，行军加速道具包，血量回复包等。在几种道具中选择最合适的道具包达到目标效果。许多游戏中的解决方法是使用贪心算法，这种只是一般可行解，并不被玩家接受。用动态规划算法可以构造出最优解。 动态规划过程是：每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划 我们先来构造一般意义上的最优解 假设当前我们在建造一个建筑，建筑需花费n小时的时间，玩家拥有3种道具a、b、c,分别能使建筑时间缩短1、2、3小时，我们来看看每个阶段的最优解情况&hellip;",
            "content_html": "<p>原文发布于微信公众号<a href=\"https://hweiwei.github.io/dashou/dong-tai-gui-hua-xian-ding-tiao-jian-qiu-zui-you-jie-2.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://mp.weixin.qq.com/s?__biz=MzI4MDA3MTcyMA==&amp;mid=2247483680&amp;idx=1&amp;sn=49c0d6934538cac1fe79d0430459b8d1&amp;chksm=ebbf5a67dcc8d371ca1f64da1dc7b23637cbbf1fd58e521e2cd6f4d37b4dcc79277343c81375&amp;token=1598275063&amp;lang=zh_CN#rd</a></p>\n<p>游戏中经常会用到一些buff道具，最常见的比如建造建筑时使用的时间缩短道具，行军加速道具包，血量回复包等。在几种道具中选择最合适的道具包达到目标效果。许多游戏中的解决方法是使用贪心算法，这种只是一般可行解，并不被玩家接受。用动态规划算法可以构造出最优解。</p>\n<p>动态规划过程是：每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划</p>\n<p>我们先来构造一般意义上的最优解</p>\n<p>假设当前我们在建造一个建筑，建筑需花费n小时的时间，玩家拥有3种道具a、b、c,分别能使建筑时间缩短1、2、3小时，我们来看看每个阶段的最优解情况</p>\n<table style=\"border-collapse: collapse; width: 115.1%; height: 325px;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 16.3569%;\">道具\\目标</td>\n<td style=\"width: 16.6047%;\">1</td>\n<td style=\"width: 16.7286%;\">2</td>\n<td style=\"width: 16.8524%;\">3</td>\n<td style=\"width: 16.6049%;\">4</td>\n<td style=\"width: 16.8525%;\">5</td>\n</tr>\n<tr>\n<td style=\"width: 16.3569%;\">道具a（缩短1小时）</td>\n<td style=\"width: 16.6047%;\">a*1</td>\n<td style=\"width: 16.7286%;\">a*2</td>\n<td style=\"width: 16.8524%;\">a*3</td>\n<td style=\"width: 16.6049%;\">a*4</td>\n<td style=\"width: 16.8525%;\">a*5</td>\n</tr>\n<tr>\n<td style=\"width: 16.3569%;\">道具b（缩短2小时）</td>\n<td style=\"width: 16.6047%;\">a*1</td>\n<td style=\"width: 16.7286%;\">b * 1</td>\n<td style=\"width: 16.8524%;\">b * 1+ a * 1</td>\n<td style=\"width: 16.6049%;\">b*2</td>\n<td style=\"width: 16.8525%;\">b * 2 + a * 1</td>\n</tr>\n<tr>\n<td style=\"width: 16.3569%;\">道具c（缩短3小时）</td>\n<td style=\"width: 16.6047%;\">a*1</td>\n<td style=\"width: 16.7286%;\">b*1</td>\n<td style=\"width: 16.8524%;\">c*1</td>\n<td style=\"width: 16.6049%;\">c * 1 + a * 1</td>\n<td style=\"width: 16.8525%;\">c *1 + b * 1</td>\n</tr>\n</tbody>\n</table>\n<p>我们来解释下表格所表达的意思，<strong>一般的我们认为在所有道具都参与的情况下的解决方案为最优解</strong>，并且优先使用时效长的道具</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://hweiwei.github.io/dashou/media/posts/9/640.png\" alt=\"\" width=\"723\" height=\"168\" sizes=\"100vw\" srcset=\"https://hweiwei.github.io/dashou/media/posts/9/responsive/640-xs.png 300w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-sm.png 480w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-md.png 768w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-lg.png 1024w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-xl.png 1360w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-2xl.png 1600w\"></figure>\n<p> </p>\n<p>当目标为缩短1小时的时候的最有解，结果为使用 1个道具a。同理，目标为2时使用一个b,目标为3时使用一个道具3。观察3中的第二列解</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://hweiwei.github.io/dashou/media/posts/9/640-1.png\" alt=\"\" width=\"206\" height=\"43\" sizes=\"100vw\" srcset=\"https://hweiwei.github.io/dashou/media/posts/9/responsive/640-1-xs.png 300w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-1-sm.png 480w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-1-md.png 768w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-1-lg.png 1024w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-1-xl.png 1360w ,https://hweiwei.github.io/dashou/media/posts/9/responsive/640-1-2xl.png 1600w\"></figure>\n<p> </p>\n<p>意思为当目标为缩短3个小时时，在拥有道具a和b情况下的最有解。</p>\n<p>至此，大家应该明白表格所表达的意思了吧。</p>\n<p>现在，我们对道具数量做出限定，假定在b、c只拥有一个的情况下，求6小时的最优解。我们继续构造最优解表格</p>\n<table style=\"border-collapse: collapse; width: 114.815%; height: 434px;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 15.4762%;\">道具\\目标</td>\n<td style=\"width: 9.04762%;\">1</td>\n<td style=\"width: 9.40476%;\">2</td>\n<td style=\"width: 11.6667%;\">3</td>\n<td style=\"width: 28.3333%;\">4</td>\n<td style=\"width: 11.9048%;\">5</td>\n<td style=\"width: 14.1667%;\">6</td>\n</tr>\n<tr>\n<td style=\"width: 15.4762%;\">道具a（缩短1小时）</td>\n<td style=\"width: 9.04762%;\">a*1</td>\n<td style=\"width: 9.40476%;\">a*2</td>\n<td style=\"width: 11.6667%;\">a*3</td>\n<td style=\"width: 28.3333%;\">a*4</td>\n<td style=\"width: 11.9048%;\">a*5</td>\n<td style=\"width: 14.1667%;\">a*6</td>\n</tr>\n<tr>\n<td style=\"width: 15.4762%;\">道具b（缩短2小时）*1</td>\n<td style=\"width: 9.04762%;\">a*1</td>\n<td style=\"width: 9.40476%;\">b * 1</td>\n<td style=\"width: 11.6667%;\">b * 1+ a * 1</td>\n<td style=\"width: 28.3333%;\">b * 1+a * 2(原则上b*2是最优解，b数量超出,需要找出b的替代解)</td>\n<td style=\"width: 11.9048%;\">b * 1 + a * 3</td>\n<td style=\"width: 14.1667%;\">b*1 + a * 4</td>\n</tr>\n<tr>\n<td style=\"width: 15.4762%;\">道具c（缩短3小时）*1</td>\n<td style=\"width: 9.04762%;\">a*1</td>\n<td style=\"width: 9.40476%;\">b*1</td>\n<td style=\"width: 11.6667%;\">c*1</td>\n<td style=\"width: 28.3333%;\">c * 1 + a * 1</td>\n<td style=\"width: 11.9048%;\">c *1 + b * 1</td>\n<td style=\"width: 14.1667%;\">c *1 + b * 1 + a * 1</td>\n</tr>\n</tbody>\n</table>\n<p>表格理解应该是没有难度了，现在我们来分析下如何用代码实现。。。中间省略无数，直接贴代码。新建一个html打开在控制台查看结果即可。</p>\n<p><code>&lt;html&gt;</code></p>\n<p><code>    &lt;body&gt;</code></p>\n<p><code>       &lt;script&gt;</code></p>\n<p><code>           const MAX = 1000000</code></p>\n<p><code>           /**数组对象深拷贝*/</code></p>\n<p><code>           function copy(list) {</code></p>\n<p><code>               let obj</code></p>\n<p><code>             let isArr = Array.isArray(list)</code></p>\n<p><code>              let isObj = list != null &amp;&amp; list instanceof Object</code></p>\n<p><code>            if (isArr) {</code></p>\n<p><code>                   obj = []</code></p>\n<p><code>                  for (let i = 0; i &lt; list.length; i++) {</code></p>\n<p><code>                        obj[i] = copy(list[i])</code></p>\n<p><code>                  }</code></p>\n<p><code>               } else if (isObj) {</code></p>\n<p><code>                  obj = {}</code></p>\n<p><code>                  for (let i in list) {</code></p>\n<p><code>                       obj[i] = copy(list[i])</code></p>\n<p><code>                  }</code></p>\n<p><code>               } else {</code></p>\n<p><code>                    obj = list</code></p>\n<p><code>              }</code></p>\n<p><code>               return obj</code></p>\n<p><code>         }</code></p>\n<p><code>           //删除无效项</code></p>\n<p><code>            function removeNoCount(list) {</code></p>\n<p><code>               let len = list.length</code></p>\n<p><code>             while (len--) {</code></p>\n<p><code>                   if (list[len].count == 0) {</code></p>\n<p><code>                       list.splice(len, 1)</code></p>\n<p><code>                    }</code></p>\n<p><code>             }</code></p>\n<p><code>           }</code></p>\n<p> </p>\n<p><code>          function getBest(list, effect) {</code></p>\n<p><code>                let keys = copy(list)</code></p>\n<p><code>               removeNoCount(keys)</code></p>\n<p><code>                let kinds = keys.length</code></p>\n<p><code>             let allEffect = 0</code></p>\n<p><code>              for (let i of list) {</code></p>\n<p><code>                    allEffect += i.value * i.count</code></p>\n<p><code>             }</code></p>\n<p><code>               //所有效果总和不比需求来得大，不必计算</code></p>\n<p><code>              if (allEffect &lt;= effect) {</code></p>\n<p><code>                   return { value: MAX }</code></p>\n<p><code>              }</code></p>\n<p><code>                let values = []</code></p>\n<p><code>             /**构建一个二位数组表，value为当前的结果值，id为存放道具id组合*/</code></p>\n<p><code>                for (let i = 0; i &lt;= kinds; i++) {</code></p>\n<p><code>                   values[i] = []</code></p>\n<p><code>                 for (let j = 0; j &lt;= effect; j++) {</code></p>\n<p><code>                      values[i][j] = {}</code></p>\n<p><code>                       values[i][j]['value'] = MAX</code></p>\n<p><code>                       values[i][j]['id'] = {}</code></p>\n<p><code>                       for (let key of list) {</code></p>\n<p><code>                           values[i][j]['id'][key.id] = 0</code></p>\n<p><code>                       }</code></p>\n<p><code>                    }</code></p>\n<p><code>                   values[i][0]['value'] = 0</code></p>\n<p><code>                }</code></p>\n<p><code>                for (let i = 0; i &lt;= effect; i++) {</code></p>\n<div>                    values[0][i]['value'] = MAX\n<p><code>               }</code></p>\n<p><code>               for (let eff = 1; eff &lt;= effect; eff++) {</code></p>\n<p><code>                   for (let key = 1; key &lt;= kinds; key++) {</code></p>\n<p><code>                       //如果左侧没有最优解，则当前项不可能有最优解</code></p>\n<p><code>                     if (values[key][eff - 1].value == MAX) {</code></p>\n<p><code>                          values[key][eff].value = MAX</code></p>\n<p><code>                           continue</code></p>\n<p><code>                      }</code></p>\n<p><code>                      let value = keys[key - 1].value</code></p>\n<p><code>                      let id = keys[key - 1].id</code></p>\n<p><code>                        let upItem = values[key - 1][eff]</code></p>\n<p><code>                      let nowItem = values[key][eff]</code></p>\n<p><code>                        //如果目标值小于当前的道具效果值，将上一个目标结果与当前的效果值做比较，取小</code></p>\n<p><code>                        //参考 需要目标值为1时的推导</code></p>\n<p><code>                        if (eff &lt; value) {</code></p>\n<p><code>                           let value1 = upItem.value //目标上一个结果值</code></p>\n<p><code>                          if (value1 &lt; value) {</code></p>\n<p><code>                               nowItem.value = value1</code></p>\n<p><code>                              nowItem.id = copy(upItem.id)</code></p>\n<p><code>                            } else {</code></p>\n<p><code>                               nowItem.value = value</code></p>\n<p><code>                               nowItem.id[id]++</code></p>\n<p><code>                            }</code></p>\n<p><code>                           continue</code></p>\n<p><code>                       }</code></p>\n<p><code>                       let leftItem = values[key][eff - value]</code></p>\n<p><code>                        let canUsed = leftItem.id[id] &lt; keys[key - 1].count</code></p>\n<br>\n<p><code>                        //当前项不可用</code></p>\n<p><code>                       if (!canUsed) {</code></p>\n<p><code>                           for (let k = key - 1; k &gt; 0; k--) {</code></p>\n<p><code>                               leftItem = copy(values[k][eff - value])</code></p>\n<p><code>                                let canUsed = leftItem.id[id] &lt; keys[key - 1].count</code></p>\n<p><code>                                break</code></p>\n<p><code>                           }</code></p>\n<p><code>                       }</code></p>\n<p><code>                       if (leftItem.value == MAX) {</code></p>\n<p><code>                         nowItem.value = MAX</code></p>\n<p><code>                            continue</code></p>\n<p><code>                        }</code></p>\n<p><code>                       let value1 = upItem.value</code></p>\n<p><code>                      let value2 = leftItem.value + value</code></p>\n<p><code>                       if (value1 &lt; value2) {</code></p>\n<p><code>                           nowItem.value = value1</code></p>\n<p><code>                           nowItem.id = copy(upItem.id)</code></p>\n<p><code>                       } else {</code></p>\n<p><code>                          nowItem.value = value2</code></p>\n<p><code>                          nowItem.id = copy(leftItem.id)</code></p>\n<p><code>                          nowItem.id[id]++</code></p>\n<p><code>                       }</code></p>\n<p><code>                    }</code></p>\n<p><code>              }</code></p>\n<p><code>              console.log(values[kinds][effect])</code></p>\n<p><code>                return values[kinds][effect]</code></p>\n<p><code>          }</code></p>\n<p><code>           let list = [</code></p>\n<p><code>               { id: '时间道具a', value: 3, count: 6 },</code></p>\n<p><code>                { id: '时间道具b', value: 5, count: 2 },</code></p>\n<p><code>            { id: '时间道具c', value: 7, count: 2 },</code></p>\n<p><code>              { id: '时间道具d', value: 99, count: 5 },</code></p>\n<p><code>            ]</code></p>\n<p><code>         let eff = 517</code></p>\n<p><code>            getBest(list, eff)</code></p>\n<p><code>       &lt;/script&gt;</code></p>\n<p><code>    &lt;/body&gt;</code></p>\n<p><code>&lt;/html&gt;</code></p>\n<p><code></code></p>\n</div>",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2023-08-01T14:46:50+08:00",
            "date_modified": "2023-08-03T09:53:28+08:00"
        },
        {
            "id": "https://hweiwei.github.io/dashou/cocosre-geng-dong-tai-ban-ben-di-zhi-yan-jiu-2.html",
            "url": "https://hweiwei.github.io/dashou/cocosre-geng-dong-tai-ban-ben-di-zhi-yan-jiu-2.html",
            "title": "cocos热更动态版本地址研究",
            "summary": "cocos creator 2.x 版本中，关于热更的远程地址，版本等信息来源于工程中写入的project.manifest ，没有提供外部修改接口。如果想更自由的管理版本、热更地址配置，势必要修改源码。但是修改源码对于cocos&hellip;",
            "content_html": "<p>cocos creator 2.x 版本中，关于热更的远程地址，版本等信息来源于工程中写入的project.manifest ，没有提供外部修改接口。如果想更自由的管理版本、热更地址配置，势必要修改源码。但是修改源码对于cocos 引擎版本升级不够友好。经过研究jsb 相关内容，这边提供一个在不修改源码的情况下达到自由控制版本信息的方法。</p><ol>\n<li>获取本地热更文件project.manifest 获得内容data 并解析</li>\n</ol>\n<pre><code>let asset = JSON.parse(data._nativeAsset);  \n</code></pre>\n<ol start=\"2\">\n<li>修改asset 内容</li>\n</ol>\n<pre><code>asset.packageUrl = this.serverUrl + HOT_PACKAGE + version;\nasset.remoteManifestUrl = this.serverUrl + HOT_PACKAGE + version + manifest + &quot;/project.manifest&quot;;\nasset.remoteVersionUrl = this.serverUrl + HOT_PACKAGE + version + manifest + &quot;/version.manifest&quot;;\n</code></pre>\n<ol start=\"3\">\n<li>判定是否存在存储的热更文件 jsb.fileUtils.isFileExist(this.storagePath + “/project.manifest”)，如果存在更新该文件</li>\n</ol>\n<pre><code class=\"language-if\">    let str = jsb.fileUtils.getStringFromFile(this.storagePath + &quot;/project.manifest&quot;);\n    let json = JSON.parse(str);\n    json.packageUrl = asset.packageUrl;\n    json.remoteManifestUrl = asset.remoteManifestUrl;\n    json.remoteVersionUrl = asset.remoteVersionUrl;\n    jsb.fileUtils.writeStringToFile(JSON.stringify(json), this.storagePath + &quot;/project.manifest&quot;);\n}\n</code></pre>\n<p>这一步的目的是因为源码中，会优先使用存贮的热更文件</p><pre><code>// Compare with cached manifest to determine which one to use\nif (cachedManifest)\n{\n    bool localNewer = _localManifest-&gt;versionGreater(cachedManifest, _versionCompareHandle);\n    if (localNewer)\n    {\n        // Recreate storage, to empty the content\n        _fileUtils-&gt;removeDirectory(_storagePath);\n        _fileUtils-&gt;createDirectory(_storagePath);\n        CC_SAFE_RELEASE(cachedManifest);\n    }\n    else\n    {\n        CC_SAFE_RELEASE(_localManifest);\n        _localManifest = cachedManifest;\n    }\n}\n</code></pre>\n<ol start=\"4\">\n<li>构造新的manifest 对象</li>\n</ol>\n<pre><code>let mani = new jsb.Manifest(JSON.stringify(asset), this.storagePath);\n</code></pre>\n<p>5.热更管理器加载该配置对象即可。</p><pre><code>this._assetManager.loadLocalManifest(mani, this.storagePath);\n</code></pre>\n<p><em><strong>注意</strong></em>：在构造热更管理器时不要传入原始的manifest 文件，否则loadLocalManifest方法将失效</p><pre><code>this._assetManager = new jsb.AssetsManager(&quot;&quot;, this.storagePath, this.versionCompareHandle);\n</code></pre>\n",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2023-08-01T09:48:32+08:00",
            "date_modified": "2023-08-01T13:33:46+08:00"
        },
        {
            "id": "https://hweiwei.github.io/dashou/shader-zhi-shan-dian-te-xiao.html",
            "url": "https://hweiwei.github.io/dashou/shader-zhi-shan-dian-te-xiao.html",
            "title": "shader 之闪电特效",
            "content_html": "\n  <p>\n    \n  </p>",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2022-10-08T15:20:39+08:00",
            "date_modified": "2022-10-08T15:20:39+08:00"
        },
        {
            "id": "https://hweiwei.github.io/dashou/jie-jue-24x-ios-zhen-ji-shan-tui-wen-ti.html",
            "url": "https://hweiwei.github.io/dashou/jie-jue-24x-ios-zhen-ji-shan-tui-wen-ti.html",
            "title": "解决2.4.x ios 真机闪退问题",
            "summary": "由于 jit 不支持ios ，引擎错误开启支持导致。修改 \\cocos2d-x\\cocos\\scripting\\js-bindings\\jswrapper\\v8\\ScriptEngine.cpp&hellip;",
            "content_html": "<p>由于 jit 不支持ios ，引擎错误开启支持导致。修改 \\cocos2d-x\\cocos\\scripting\\js-bindings\\jswrapper\\v8\\ScriptEngine.cpp 该路径下方法jitSupported</p><pre><code>\nbool jitSupported() {\n            #if CC_IOS_FORCE_DISABLE_JIT\n            return false;\n            #elif TARGET_CPU_X86 || TARGET_CPU_X86_64\n            return true;\n            #else\n            \n            //2022.7.1 暂时移除其他版本jit支持，解决真机闪退问题\n//            // Check for arm64e.\n//            cpu_type_t cpuType = 0;\n//            size_t cpuTypeSize = sizeof(cpu_type_t);\n//            if (::sysctlbyname(&quot;hw.cputype&quot;, &amp;cpuType, &amp;cpuTypeSize, nullptr, 0) &lt; 0) {\n//                SE_LOGD(&quot;Could not execute sysctl() to get CPU type: %s&quot;, strerror(errno));\n//            }\n//\n//            cpu_subtype_t cpuSubType = 0;\n//            if (::sysctlbyname(&quot;hw.cpusubtype&quot;, &amp;cpuSubType, &amp;cpuTypeSize, nullptr, 0) &lt; 0) {\n//                SE_LOGD(&quot;Could not execute sysctl() to get CPU subtype: %s&quot;, strerror(errno));\n//            }\n//\n//            // Tracing is necessary unless the device is arm64e (A12 chip or higher).\n//            if (cpuType != CPU_TYPE_ARM64 || cpuSubType != CPU_SUBTYPE_ARM64E) {\n//                return false;\n//            }\n//\n//            // Check for iOS 14.2 and higher.\n//            size_t osVersionSize;\n//            ::sysctlbyname(&quot;kern.osversion&quot;, NULL, &amp;osVersionSize, NULL, 0);\n//            char osversionBuffer[osVersionSize];\n//\n//            if (::sysctlbyname(&quot;kern.osversion&quot;, osversionBuffer, &amp;osVersionSize, NULL, 0) &lt; 0) {\n//                SE_LOGD(&quot;Could not execute sysctl() to get current OS version: %s&quot;, strerror(errno));\n//                return false;\n//            }\n//\n//            int majorVersion = 0;\n//            char minorLetter = &#39;Z&#39;;\n//\n//            for (size_t index = 0; index &lt; osVersionSize; index++) {\n//                char version_char = osversionBuffer[index];\n//                // Find the minor version build letter.\n//                if (isalpha(version_char)) {\n//                    majorVersion = atoi((const char*)osversionBuffer);\n//                    minorLetter = toupper(version_char);\n//                    break;\n//                }\n//            }\n//            // 18B92 is iOS 14.2 beta release candidate where tracing became unnecessary.\n//            return majorVersion &gt; 18 || (majorVersion == 18 &amp;&amp; minorLetter &gt;= &#39;B&#39;);\n            return false;\n            #endif //TARGET_CPU_X86 || TARGET_CPU_X86_64\n        }\n                \n</code></pre>\n",
            "author": {
                "name": "黄伟伟"
            },
            "tags": [
            ],
            "date_published": "2022-09-23T10:43:08+08:00",
            "date_modified": "2022-09-23T10:49:36+08:00"
        }
    ]
}
